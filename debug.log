[2024-10-03 01:25:52] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:25:52] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:52] Opening Balance: 1160.00
[2024-10-03 01:25:52] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:52] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=1160.00
[2024-10-03 01:25:52] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":1160,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:25:57] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 1440.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:57] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 720.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:57] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 120.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:57] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 1440.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:57] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 720.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:57] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:57] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:57] Opening Balance: 120.00
[2024-10-03 01:25:57] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:57] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:57] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 1440.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 720.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 120.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 1440.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 720.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 120.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 1440.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 720.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 120.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 1440.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 720.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:58] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:58] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:58] Opening Balance: 120.00
[2024-10-03 01:25:58] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:58] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:58] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 1440.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 720.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 120.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 1440.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 720.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 120.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 1440.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 720.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 120.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 1440.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 720.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 120.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:25:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:25:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:25:59] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:25:59] Opening Balance: 1440.00
[2024-10-03 01:25:59] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:25:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=1440.00
[2024-10-03 01:26:00] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":1440,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":14,"balance":1654,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":-14,"balance":1800,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":14,"balance":2094,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:26:00] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:26:00] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:26:00] Opening Balance: 720.00
[2024-10-03 01:26:00] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:26:00] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=720.00
[2024-10-03 01:26:00] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":720,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":-2,"balance":858,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":2,"balance":980,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:26:00] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:26:00] Opening Balance Query: 
    SELECT SUM(
        CASE 
            WHEN r.received_date IS NOT NULL THEN dr.quantity 
            WHEN i.issue_date IS NOT NULL THEN -di.quantity
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END
    ) as opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:26:00] Opening Balance: 120.00
[2024-10-03 01:26:00] Daily Movements Query: 
    WITH daily_movements AS (
        SELECT 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
            SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
            SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
            SUM(CASE 
                WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN dt.quantity 
                WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN -dt.quantity
                ELSE 0 
            END) as transfer,
            COALESCE(r.user_id, i.user_id, t.user_id) as user_id
        FROM 
            products p
        CROSS JOIN locations l
        LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
        LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
        LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
        LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
        LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
        LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
        WHERE 
            p.product_id = :productId
            AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
        GROUP BY 
            DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
            COALESCE(r.user_id, i.user_id, t.user_id)
    )
    SELECT 
        date,
        receive,
        issue,
        transfer,
        @running_total := @running_total + (receive - issue + transfer) as balance,
        user_id,
        CONCAT(u.fname, ' ', u.lname) as user_name
    FROM 
        daily_movements
    LEFT JOIN users u ON daily_movements.user_id = u.UserID,
        (SELECT @running_total := :openingBalance) as init
    ORDER BY 
        date
    
[2024-10-03 01:26:00] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=120.00
[2024-10-03 01:26:00] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":120,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":-16,"balance":154,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":8,"balance":178,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:45] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:27:45] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:45] Opening Balance: 100.00
[2024-10-03 01:27:45] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:45] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:27:45] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:27:46] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:27:46] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:46] Opening Balance: 100.00
[2024-10-03 01:27:46] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:46] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:27:46] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:27:48] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:48] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:48] Opening Balance: 125.00
[2024-10-03 01:27:48] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:48] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:48] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:48] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:48] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:48] Opening Balance: 63.00
[2024-10-03 01:27:48] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:48] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:48] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:48] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:48] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:48] Opening Balance: 20.00
[2024-10-03 01:27:48] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:48] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:48] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 125.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 63.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 20.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 125.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 63.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:52] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:52] Opening Balance: 20.00
[2024-10-03 01:27:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:52] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:52] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 125.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 63.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 20.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 125.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 63.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 20.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 125.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 63.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 20.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 125.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 63.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:53] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:27:53] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:53] Opening Balance: 20.00
[2024-10-03 01:27:53] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:53] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:27:53] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:27:56] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:27:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:56] Opening Balance: 240.00
[2024-10-03 01:27:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:56] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:27:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:27:56] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:27:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:56] Opening Balance: 100.00
[2024-10-03 01:27:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:56] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:27:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:27:56] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:27:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:27:56] Opening Balance: 43.00
[2024-10-03 01:27:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:27:56] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:27:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:31] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:31] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:31] Opening Balance: 125.00
[2024-10-03 01:28:31] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:31] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:28:31] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:28:31] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:31] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:31] Opening Balance: 63.00
[2024-10-03 01:28:31] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:31] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:28:31] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:28:31] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:31] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:31] Opening Balance: 20.00
[2024-10-03 01:28:31] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:31] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:28:31] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:28:47] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:47] Opening Balance: 240.00
[2024-10-03 01:28:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:47] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:28:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:47] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:47] Opening Balance: 100.00
[2024-10-03 01:28:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:47] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:28:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:47] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:47] Opening Balance: 43.00
[2024-10-03 01:28:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:47] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:28:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:52] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:28:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:52] Opening Balance: 100.00
[2024-10-03 01:28:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:52] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:28:52] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:55] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:55] Opening Balance: 240.00
[2024-10-03 01:28:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:55] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:28:55] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:55] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:55] Opening Balance: 100.00
[2024-10-03 01:28:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:55] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:28:55] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:55] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:55] Opening Balance: 43.00
[2024-10-03 01:28:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:55] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:28:55] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 240.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 100.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 43.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 240.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 100.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:56] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:28:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:56] Opening Balance: 43.00
[2024-10-03 01:28:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:56] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:28:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:28:59] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:59] Opening Balance: 125.00
[2024-10-03 01:28:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:59] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:28:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:28:59] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:59] Opening Balance: 63.00
[2024-10-03 01:28:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:59] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:28:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:28:59] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:28:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:28:59] Opening Balance: 20.00
[2024-10-03 01:28:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:28:59] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:28:59] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:15] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:30:15] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:15] Opening Balance: 100.00
[2024-10-03 01:30:15] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:15] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:30:15] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:35] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:35] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:35] Opening Balance: 125.00
[2024-10-03 01:30:35] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:35] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:35] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:35] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:35] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:35] Opening Balance: 63.00
[2024-10-03 01:30:35] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:35] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:35] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:35] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:35] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:35] Opening Balance: 20.00
[2024-10-03 01:30:35] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:35] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:35] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 125.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 63.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 20.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 125.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 63.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:36] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:36] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:36] Opening Balance: 20.00
[2024-10-03 01:30:36] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:36] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:36] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 125.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 63.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 20.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 125.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 63.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 20.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A001, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 125.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-30, openingBalance=125.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"30-09-2567","receive":480,"issue":200,"transfer":-14,"balance":751,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A002, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 63.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-30, openingBalance=63.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:37] Processing report for Product ID: A003, End Date: 2024-09-30, Start Date: 2024-09-01
[2024-10-03 01:30:37] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:37] Opening Balance: 20.00
[2024-10-03 01:30:37] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:37] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-30, openingBalance=20.00
[2024-10-03 01:30:37] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:30:40] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:40] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:40] Opening Balance: 240.00
[2024-10-03 01:30:40] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:40] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:40] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:40] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:40] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:40] Opening Balance: 100.00
[2024-10-03 01:30:40] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:40] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:40] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:40] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:40] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:40] Opening Balance: 43.00
[2024-10-03 01:30:40] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:40] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:40] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 240.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 100.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 43.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 240.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 100.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 43.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 240.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 100.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:41] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:41] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:41] Opening Balance: 43.00
[2024-10-03 01:30:41] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:41] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:41] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 240.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 100.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 43.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 240.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 100.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:42] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:42] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:42] Opening Balance: 43.00
[2024-10-03 01:30:42] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:42] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:42] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:59] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:59] Opening Balance: 240.00
[2024-10-03 01:30:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:59] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:30:59] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:59] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:59] Opening Balance: 100.00
[2024-10-03 01:30:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:59] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:30:59] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:30:59] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:30:59] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:30:59] Opening Balance: 43.00
[2024-10-03 01:30:59] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:30:59] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:30:59] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:31:00] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:31:00] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:31:00] Opening Balance: 240.00
[2024-10-03 01:31:00] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:31:00] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:31:00] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:31:00] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:31:00] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:31:00] Opening Balance: 100.00
[2024-10-03 01:31:00] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:31:00] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:31:00] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:31:00] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:31:00] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:31:00] Opening Balance: 43.00
[2024-10-03 01:31:00] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:31:00] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:31:00] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:33:10] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-01-01
[2024-10-03 01:33:10] Opening Balance: 0.00
[2024-10-03 01:33:10] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-01-2567","receive":"800.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":586,"entry_type":"transaction"},{"date":"20-04-2567","receive":"640.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1080,"entry_type":"transaction"},{"date":"01-09-2567","receive":"400.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1266,"entry_type":"transaction"},{"date":"15-09-2567","receive":"320.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1440,"entry_type":"transaction"},{"date":"30-09-2567","receive":"480.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1706,"entry_type":"transaction"}]
[2024-10-03 01:33:10] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-01-01
[2024-10-03 01:33:10] Opening Balance: 0.00
[2024-10-03 01:33:10] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-02-2567","receive":"400.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":302,"entry_type":"transaction"},{"date":"25-05-2567","receive":"320.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":540,"entry_type":"transaction"},{"date":"05-09-2567","receive":"240.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":682,"entry_type":"transaction"},{"date":"20-09-2567","receive":"200.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":800,"entry_type":"transaction"}]
[2024-10-03 01:33:10] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-01-01
[2024-10-03 01:33:10] Opening Balance: 0.00
[2024-10-03 01:33:10] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"15-03-2567","receive":"120.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":106,"entry_type":"transaction"},{"date":"10-09-2567","receive":"80.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":172,"entry_type":"transaction"},{"date":"25-09-2567","receive":"30.00","issue":"14.00","transfer":"-8.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":180,"entry_type":"transaction"}]
[2024-10-03 01:33:20] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:33:20] Opening Balance: 0.00
[2024-10-03 01:33:20] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-01-2567","receive":"800.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":586,"entry_type":"transaction"},{"date":"20-04-2567","receive":"640.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1080,"entry_type":"transaction"},{"date":"01-09-2567","receive":"400.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1266,"entry_type":"transaction"},{"date":"15-09-2567","receive":"320.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1440,"entry_type":"transaction"},{"date":"30-09-2567","receive":"480.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1706,"entry_type":"transaction"}]
[2024-10-03 01:33:20] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:33:20] Opening Balance: 0.00
[2024-10-03 01:33:20] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-02-2567","receive":"400.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":302,"entry_type":"transaction"},{"date":"25-05-2567","receive":"320.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":540,"entry_type":"transaction"},{"date":"05-09-2567","receive":"240.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":682,"entry_type":"transaction"},{"date":"20-09-2567","receive":"200.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":800,"entry_type":"transaction"}]
[2024-10-03 01:33:20] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:33:20] Opening Balance: 0.00
[2024-10-03 01:33:20] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"15-03-2567","receive":"120.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":106,"entry_type":"transaction"},{"date":"10-09-2567","receive":"80.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":172,"entry_type":"transaction"},{"date":"25-09-2567","receive":"30.00","issue":"14.00","transfer":"-8.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":180,"entry_type":"transaction"}]
[2024-10-03 01:35:29] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-01-01
[2024-10-03 01:35:29] Opening Balance: 0.00
[2024-10-03 01:35:29] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-02-2567","receive":"400.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":302,"entry_type":"transaction"},{"date":"25-05-2567","receive":"320.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":540,"entry_type":"transaction"},{"date":"05-09-2567","receive":"240.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":682,"entry_type":"transaction"},{"date":"20-09-2567","receive":"200.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":800,"entry_type":"transaction"}]
[2024-10-03 01:35:38] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:35:38] Opening Balance: 0.00
[2024-10-03 01:35:38] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-01-2567","receive":"800.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":586,"entry_type":"transaction"},{"date":"20-04-2567","receive":"640.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1080,"entry_type":"transaction"},{"date":"01-09-2567","receive":"400.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1266,"entry_type":"transaction"},{"date":"15-09-2567","receive":"320.00","issue":"160.00","transfer":"14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1440,"entry_type":"transaction"},{"date":"30-09-2567","receive":"480.00","issue":"200.00","transfer":"-14.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":1706,"entry_type":"transaction"}]
[2024-10-03 01:35:38] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:35:38] Opening Balance: 0.00
[2024-10-03 01:35:38] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-02-2567","receive":"400.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":302,"entry_type":"transaction"},{"date":"25-05-2567","receive":"320.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":540,"entry_type":"transaction"},{"date":"05-09-2567","receive":"240.00","issue":"100.00","transfer":"2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":682,"entry_type":"transaction"},{"date":"20-09-2567","receive":"200.00","issue":"80.00","transfer":"-2.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":800,"entry_type":"transaction"}]
[2024-10-03 01:35:38] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-01-01
[2024-10-03 01:35:38] Opening Balance: 0.00
[2024-10-03 01:35:38] Final movements data: [{"date":"01-01-2567","receive":0,"issue":0,"transfer":0,"balance":"0.00","user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"15-03-2567","receive":"120.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":106,"entry_type":"transaction"},{"date":"10-09-2567","receive":"80.00","issue":"30.00","transfer":"16.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":172,"entry_type":"transaction"},{"date":"25-09-2567","receive":"30.00","issue":"14.00","transfer":"-8.00","user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","balance":180,"entry_type":"transaction"}]
[2024-10-03 01:36:55] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:36:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:36:55] Opening Balance: 100.00
[2024-10-03 01:36:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:36:55] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:36:55] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 240.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 100.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 43.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 240.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 100.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:06] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:06] Opening Balance: 43.00
[2024-10-03 01:37:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:06] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 240.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 100.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 43.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 240.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 100.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 43.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 240.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 100.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:07] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:07] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:07] Opening Balance: 43.00
[2024-10-03 01:37:07] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:07] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:07] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:15] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:37:15] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:15] Opening Balance: 100.00
[2024-10-03 01:37:15] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:15] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:37:15] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:16] Processing report for Product ID: A002, End Date: 2024-10-02, Start Date: 2024-10-01
[2024-10-03 01:37:16] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:16] Opening Balance: 100.00
[2024-10-03 01:37:16] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:16] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-02, openingBalance=100.00
[2024-10-03 01:37:16] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:32] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:32] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:32] Opening Balance: 240.00
[2024-10-03 01:37:32] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:32] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:32] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:44] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:44] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:44] Opening Balance: 43.00
[2024-10-03 01:37:44] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:44] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:44] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:47] Processing report for Product ID: A001, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:47] Opening Balance: 240.00
[2024-10-03 01:37:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:47] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-30, openingBalance=240.00
[2024-10-03 01:37:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:47] Processing report for Product ID: A002, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:47] Opening Balance: 100.00
[2024-10-03 01:37:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:47] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-30, openingBalance=100.00
[2024-10-03 01:37:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:47] Processing report for Product ID: A003, End Date: 2024-10-30, Start Date: 2024-10-01
[2024-10-03 01:37:47] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:47] Opening Balance: 43.00
[2024-10-03 01:37:47] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:47] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-30, openingBalance=43.00
[2024-10-03 01:37:47] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:37:55] Processing report for Product ID: A001, End Date: 2024-09-29, Start Date: 2024-09-01
[2024-10-03 01:37:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:55] Opening Balance: 125.00
[2024-10-03 01:37:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:55] Parameters: productId=A001, startDate=2024-09-01, endDate=2024-09-29, openingBalance=125.00
[2024-10-03 01:37:55] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":125,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"01-09-2567","receive":400,"issue":200,"transfer":-14,"balance":311,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"15-09-2567","receive":320,"issue":160,"transfer":14,"balance":485,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:37:55] Processing report for Product ID: A002, End Date: 2024-09-29, Start Date: 2024-09-01
[2024-10-03 01:37:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:55] Opening Balance: 63.00
[2024-10-03 01:37:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:55] Parameters: productId=A002, startDate=2024-09-01, endDate=2024-09-29, openingBalance=63.00
[2024-10-03 01:37:55] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":63,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"05-09-2567","receive":240,"issue":100,"transfer":2,"balance":205,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"20-09-2567","receive":200,"issue":80,"transfer":-2,"balance":323,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:37:55] Processing report for Product ID: A003, End Date: 2024-09-29, Start Date: 2024-09-01
[2024-10-03 01:37:55] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:37:55] Opening Balance: 20.00
[2024-10-03 01:37:55] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:37:55] Parameters: productId=A003, startDate=2024-09-01, endDate=2024-09-29, openingBalance=20.00
[2024-10-03 01:37:55] Final movements data: [{"date":"01-09-2567","receive":null,"issue":null,"transfer":null,"balance":20,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"10-09-2567","receive":80,"issue":30,"transfer":16,"balance":86,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"},{"date":"25-09-2567","receive":30,"issue":14,"transfer":-8,"balance":94,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:38:13] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:13] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:13] Opening Balance: 240.00
[2024-10-03 01:38:13] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:13] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:38:13] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:13] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:13] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:13] Opening Balance: 100.00
[2024-10-03 01:38:13] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:13] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:38:13] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:13] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:13] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:13] Opening Balance: 43.00
[2024-10-03 01:38:13] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:13] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:38:13] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:52] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:52] Opening Balance: 240.00
[2024-10-03 01:38:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:52] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:38:52] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:38:52] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:52] Opening Balance: 100.00
[2024-10-03 01:38:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:52] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:38:52] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:52] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:52] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:52] Opening Balance: 43.00
[2024-10-03 01:38:52] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:52] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:38:52] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:54] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:54] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:54] Opening Balance: 240.00
[2024-10-03 01:38:54] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:54] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:38:54] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:38:54] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:54] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:54] Opening Balance: 100.00
[2024-10-03 01:38:54] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:54] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:38:54] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:54] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:54] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:54] Opening Balance: 43.00
[2024-10-03 01:38:54] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:54] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:38:54] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:56] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:56] Opening Balance: 240.00
[2024-10-03 01:38:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:56] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:38:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:38:56] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:56] Opening Balance: 100.00
[2024-10-03 01:38:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:56] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:38:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:38:56] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:38:56] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:38:56] Opening Balance: 43.00
[2024-10-03 01:38:56] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:38:56] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:38:56] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:04] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 240.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:39:04] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 100.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:04] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 43.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:04] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 240.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:39:04] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 100.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:04] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:04] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:04] Opening Balance: 43.00
[2024-10-03 01:39:04] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:04] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:39:04] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:06] Processing report for Product ID: A001, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:06] Opening Balance: 240.00
[2024-10-03 01:39:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:06] Parameters: productId=A001, startDate=2024-10-01, endDate=2024-10-03, openingBalance=240.00
[2024-10-03 01:39:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":240,"user_id":null,"user_name":null,"entry_type":"opening_balance"},{"date":"03-10-2567","receive":80,"issue":200,"transfer":-14,"balance":106,"user_id":"1","user_name":"\u0e2d\u0e14\u0e34\u0e40\u0e17\u0e1e \u0e1e\u0e31\u0e19\u0e18\u0e4c\u0e40\u0e1e\u0e35\u0e22\u0e23","entry_type":"transaction"}]
[2024-10-03 01:39:06] Processing report for Product ID: A002, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:06] Opening Balance: 100.00
[2024-10-03 01:39:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:06] Parameters: productId=A002, startDate=2024-10-01, endDate=2024-10-03, openingBalance=100.00
[2024-10-03 01:39:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":100,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
[2024-10-03 01:39:06] Processing report for Product ID: A003, End Date: 2024-10-03, Start Date: 2024-10-01
[2024-10-03 01:39:06] Opening Balance Query: 
SELECT 
    COALESCE(
        (SELECT SUM(quantity) FROM d_receive dr
         JOIN h_receive hr ON dr.receive_header_id = hr.receive_header_id
         WHERE dr.product_id = :productId AND hr.received_date < :startDate),
        0
    ) -
    COALESCE(
        (SELECT SUM(quantity) FROM d_issue di
         JOIN h_issue hi ON di.issue_header_id = hi.issue_header_id
         WHERE di.product_id = :productId AND hi.issue_date < :startDate),
        0
    ) +
    COALESCE(
        (SELECT SUM(
            CASE 
                WHEN ht.from_location_id = l.location_id THEN -dt.quantity
                WHEN ht.to_location_id = l.location_id THEN dt.quantity
                ELSE 0
            END
        ) FROM d_transfer dt
         JOIN h_transfer ht ON dt.transfer_header_id = ht.transfer_header_id
         CROSS JOIN locations l
         WHERE dt.product_id = :productId AND ht.transfer_date < :startDate),
        0
    ) AS opening_balance
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) < :startDate
    
[2024-10-03 01:39:06] Opening Balance: 43.00
[2024-10-03 01:39:06] Daily Movements Query: 
WITH daily_movements AS (
    SELECT 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) as date,
        SUM(CASE WHEN r.received_date IS NOT NULL THEN dr.quantity ELSE 0 END) as receive,
        SUM(CASE WHEN i.issue_date IS NOT NULL THEN di.quantity ELSE 0 END) as issue,
        SUM(CASE 
            WHEN t.transfer_date IS NOT NULL AND t.from_location_id = l.location_id THEN -dt.quantity 
            WHEN t.transfer_date IS NOT NULL AND t.to_location_id = l.location_id THEN dt.quantity
            ELSE 0 
        END) as transfer,
        COALESCE(r.user_id, i.user_id, t.user_id) as user_id
    FROM 
        products p
    CROSS JOIN locations l
    LEFT JOIN d_receive dr ON p.product_id = dr.product_id AND dr.location_id = l.location_id
    LEFT JOIN h_receive r ON dr.receive_header_id = r.receive_header_id
    LEFT JOIN d_issue di ON p.product_id = di.product_id AND di.location_id = l.location_id
    LEFT JOIN h_issue i ON di.issue_header_id = i.issue_header_id
    LEFT JOIN d_transfer dt ON p.product_id = dt.product_id
    LEFT JOIN h_transfer t ON dt.transfer_header_id = t.transfer_header_id
    WHERE 
        p.product_id = :productId
        AND DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)) BETWEEN :startDate AND :endDate
    GROUP BY 
        DATE(COALESCE(r.received_date, i.issue_date, t.transfer_date)),
        COALESCE(r.user_id, i.user_id, t.user_id)
)
SELECT 
    date,
    receive,
    issue,
    transfer,
    @running_total := @running_total + (receive - issue + transfer) as balance,
    user_id,
    CONCAT(u.fname, ' ', u.lname) as user_name
FROM 
    daily_movements
LEFT JOIN users u ON daily_movements.user_id = u.UserID,
    (SELECT @running_total := :openingBalance) as init
ORDER BY 
    date
    
[2024-10-03 01:39:06] Parameters: productId=A003, startDate=2024-10-01, endDate=2024-10-03, openingBalance=43.00
[2024-10-03 01:39:06] Final movements data: [{"date":"01-10-2567","receive":null,"issue":null,"transfer":null,"balance":43,"user_id":null,"user_name":null,"entry_type":"opening_balance"}]
